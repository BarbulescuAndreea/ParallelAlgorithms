Idee de implementare:
Am pornit de la modelul Fork-Join Pool. Creez un ForkJoinPool care are dimensiunea maxima de thread-uri egala cu numarul de thread-uri
dat la apelare(P). Creez(invoke) un task(thread) de Read, care la randul sau(in ReadTask class) imi va creea mai multe thread-uri, inca cateva de Read pentru
citirea din fisierul orders.txt, si altele de process care vor vedea comanda si o vor procesa- fiecare task de process care vede produsele
dintr o comanda, imi creeaza alte noi sub thread-uri de Process care se ocupa cu scrierea in paralel in fisierul de out "orderID, productID, shipped",
apoi cand o comanda are toate produsele scrise cu shipped de catre noile thread-uri de process, thread-ul mare de process care le-a subcreat pt
comanda coresp lui, este cel care imi va scrie in fisierul "orders_out.txt" shipped pt toata comanda(asa cum se mentioneaza ca trebuie sa se intample
in ultimul punct mentionat al temei la sectiunea "WorkFlow".

Pentru a respecta principiile OOP, am mai multe clase, fiecare ocupandu-se cu un lucru specific:

FolderReader - clasa care imi ia folder-uri cu fisierele de intrare, si imi scoate din folder fisierele de input in 2 variabile.

OrdersReader - clasa care imi citeste fisierul de input "orders.txt" line by line, si imi imparte o linie de input in [orderID, nrProduse],
fiindca la inceput este primit ca un String.

OrderEntry - clasa folosita doar pt a-mi tine perechea dintre orderID, nrProduse din order-ul respectiv.

OrderProductsReader - clasa care imi citeste fisierul orders_products.txt si imi cauta un produs pt o comanda anume, apoi cand cauta
                     urmatorul produs din comanda, pleaca de la pozitia la care s a gasit produsul anterior.

ProcessProductsWriter - clasa ce extinde recursiveTask, si care contine metoda Compute ce va fi apelata de sub-thread-urile
                        create de thread-urile de process de process(cand sunt apelate cu fork) pentru a scrie in fisierul
                        de output "orderID, productID, shipped".
ProcessTask - clasa ce contine metoda de Compute apelata de thread-urile de process initiale care au fost create de primul thread de Read.
             In ea caut toate produsele dintr o comanda specifica, apoi fiecare produs in parte dintr o comanda il dau la randul lui
             altul sub-thread care va apela functia compute din ProcessProductsWriter explicata mai sus ca sa imi faca scrierea in fisierul
             de out. La final, ProcessTask-ul(thread-ul) curent scrie in fisierul "orders_out.txt" "shipped" pt toata comanda.

ProductsAndOrderID - clasa ajutatoare care imi inglobeaza campurile orderID, productID.

ReadTask - clasa folosita pentru a creea toate thread-urile de Read si Process, plecand de la un singur thread de Read dat in Main(Tema2)
            in invoke => folosita pentru a da fork si join la toate aceste thread-uri.

Tema2 - clasa de main, initializarile necesare.




